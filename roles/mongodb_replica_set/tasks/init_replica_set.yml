---
- name: Wait for mongo primary to come up
  shell: |
    docker exec mongo1 \
      mongosh --quiet --eval "db.runCommand({ ping: 1 }).ok"
  register: mongo_ping
  retries: 30
  delay: 5
  until: mongo_ping.stdout.strip() == "1"
  changed_when: false

- name: Check if replica set is initiated
  shell: |
    docker exec mongo1 mongosh --quiet --eval \
      "try { rs.status().ok } catch (e) { print(0) }"
  register: rs_status
  changed_when: false
  failed_when: false

- name: Initiate replica set (idempotent)
  shell: |
    docker exec mongo1 mongosh \
      -u {{ mongo_root_user }} \
      -p '{{ mongo_root_password }}' \
      --authenticationDatabase admin \
      --quiet --eval '
        let st = 0;
        try { st = rs.status().ok } catch (e) { st = 0 }
        if (st !== 1) {
          rs.initiate({
            _id: "{{ global_defaults.mongo_replicaset_name }}",
            members: [
              { _id: 0, host: "mongo1:27017" },
              { _id: 1, host: "mongo2:27017" },
              { _id: 2, host: "mongo3:27017" }
            ]
          });
          print("Replica set initiated");
        } else {
          print("Replica set already initialized");
        }'
  register: rs_init
  changed_when: '"initiated" in rs_init.stdout'

- name: Create PMM user 
  shell: |
    docker exec mongo1 mongosh \
      -u {{ mongo_root_user }} \
      -p {{ mongo_root_password }} \
      --authenticationDatabase admin \
      --quiet --eval '
        if (!db.getSiblingDB("admin").getUser("{{ mongo_pmm_user }}")) {
          db.getSiblingDB("admin").createUser({
            user: "{{ mongo_pmm_user }}",
            pwd:  "{{ mongo_pmm_password }}",
            roles: [
              { role: "clusterMonitor", db: "admin" },
              { role: "read",           db: "local" }
            ]
          });
        }'
  changed_when: false

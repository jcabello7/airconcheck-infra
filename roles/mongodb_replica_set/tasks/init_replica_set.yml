---
- name: Wait for mongo primary to come up
  shell: |
    docker exec mongo1 \
      mongosh --quiet --eval "db.runCommand({ ping: 1 }).ok"
  register: mongo_ping
  retries: 30
  delay: 5
  until: mongo_ping.stdout.strip() == "1"
  changed_when: false

- name: Wait for mongo2 to come up
  shell: |
    docker exec mongo2 \
      mongosh --quiet --eval "db.runCommand({ ping: 1 }).ok"
  register: mongo_ping
  retries: 30
  delay: 5
  until: mongo_ping.stdout.strip() == "1"
  changed_when: false

- name: Wait for mongo3 to come up
  shell: |
    docker exec mongo3 \
      mongosh --quiet --eval "db.runCommand({ ping: 1 }).ok"
  register: mongo_ping
  retries: 30
  delay: 5
  until: mongo_ping.stdout.strip() == "1"
  changed_when: false

- name: Check if replica set is initiated
  shell: |
    docker exec mongo1 mongosh --quiet --eval \
      "try { rs.status().ok } catch (e) { print(0) }"
  register: rs_status
  changed_when: false
  failed_when: false

- name: Initiate replica set (idempotent)
  shell: |
    docker exec mongo1 mongosh \
      -u {{ mongo_root_user }} \
      -p '{{ mongo_root_password }}' \
      --authenticationDatabase admin \
      --quiet --eval '
        let st = 0;
        try { st = rs.status().ok } catch (e) { st = 0 }
        if (st !== 1) {
          rs.initiate({
            _id: "{{ global_defaults.mongo_replicaset_name }}",
            members: [
              { _id: 0, host: "mongo1:27017" },
              { _id: 1, host: "mongo2:27017" },
              { _id: 2, host: "mongo3:27017" }
            ]
          });
          print("Replica set initiated");
        } else {
          print("Replica set already initialized");
        }'
  register: rs_init
  changed_when: '"initiated" in rs_init.stdout'

- name: Detect current PRIMARY (wait until elected)
  shell: |
    docker exec mongo1 mongosh \
      -u {{ mongo_root_user }} \
      -p '{{ mongo_root_password }}' \
      --authenticationDatabase admin \
      --quiet --eval 'let p=db.adminCommand({hello:1}).primary||"";print(p.split(":")[0]);'
  register: primary_cont
  until: primary_cont.stdout.strip() != ""
  retries: 20          # espera hasta ~1 min (20×3 s)
  delay: 3
  changed_when: false

- name: Create / verify PMM user on PRIMARY
  shell: >-
    docker exec {{ primary_cont.stdout }}
    mongosh -u {{ mongo_root_user }}
    -p '{{ mongo_root_password }}'
    --authenticationDatabase admin --quiet --eval '
      if (!db.getSiblingDB("admin").getUser("{{ mongo_pmm_user }}")) {
        db.getSiblingDB("admin").createUser({
          user: "{{ mongo_pmm_user }}",
          pwd:  "{{ mongo_pmm_password }}",
          roles:[
            {role:"clusterMonitor", db:"admin"},
            {role:"read",           db:"local"}
          ]
        });
        print("PMM user created");
      } else {
        print("PMM user already exists");
      }'
  register: pmm_user_created
  changed_when: '"created" in pmm_user_created.stdout'

- name: Create MongoDB app user (if not exists)
  shell: |
    docker exec mongo-jumpbox mongosh "{{ global_defaults.mongo_rs_uri }}" --quiet --eval '
      if (!db.getMongo().getDB("{{ mongo_app_db }}").getUser("{{ mongo_app_user }}")) {
        db.getMongo().getDB("{{ mongo_app_db }}").createUser({
          user: "{{ mongo_app_user }}",
          pwd: "{{ mongo_app_password }}",
          roles: [ { role: "readWrite", db: "{{ mongo_app_db }}" } ]
        });
        print("App user created");
      } else {
        print("App user already exists");
      }
    '
  register: create_app_user
  changed_when: "'App user created' in create_app_user.stdout"
  no_log: false